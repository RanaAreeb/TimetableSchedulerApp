// Generated by view binder compiler. Do not edit!
package com.example.timeatbleschedulerapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.timeatbleschedulerapp.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySendNotificationBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AutoCompleteTextView actvBatch;

  @NonNull
  public final AutoCompleteTextView actvRecipientType;

  @NonNull
  public final AutoCompleteTextView actvStudent;

  @NonNull
  public final MaterialButton btnSendNotification;

  @NonNull
  public final TextInputEditText etNotificationMessage;

  @NonNull
  public final TextInputEditText etNotificationTitle;

  @NonNull
  public final LinearLayout layoutIndividualStudent;

  @NonNull
  public final LinearLayout layoutSpecificBatch;

  @NonNull
  public final CircularProgressIndicator progressBar;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivitySendNotificationBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AutoCompleteTextView actvBatch, @NonNull AutoCompleteTextView actvRecipientType,
      @NonNull AutoCompleteTextView actvStudent, @NonNull MaterialButton btnSendNotification,
      @NonNull TextInputEditText etNotificationMessage,
      @NonNull TextInputEditText etNotificationTitle, @NonNull LinearLayout layoutIndividualStudent,
      @NonNull LinearLayout layoutSpecificBatch, @NonNull CircularProgressIndicator progressBar,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.actvBatch = actvBatch;
    this.actvRecipientType = actvRecipientType;
    this.actvStudent = actvStudent;
    this.btnSendNotification = btnSendNotification;
    this.etNotificationMessage = etNotificationMessage;
    this.etNotificationTitle = etNotificationTitle;
    this.layoutIndividualStudent = layoutIndividualStudent;
    this.layoutSpecificBatch = layoutSpecificBatch;
    this.progressBar = progressBar;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySendNotificationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySendNotificationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_send_notification, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySendNotificationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actvBatch;
      AutoCompleteTextView actvBatch = ViewBindings.findChildViewById(rootView, id);
      if (actvBatch == null) {
        break missingId;
      }

      id = R.id.actvRecipientType;
      AutoCompleteTextView actvRecipientType = ViewBindings.findChildViewById(rootView, id);
      if (actvRecipientType == null) {
        break missingId;
      }

      id = R.id.actvStudent;
      AutoCompleteTextView actvStudent = ViewBindings.findChildViewById(rootView, id);
      if (actvStudent == null) {
        break missingId;
      }

      id = R.id.btnSendNotification;
      MaterialButton btnSendNotification = ViewBindings.findChildViewById(rootView, id);
      if (btnSendNotification == null) {
        break missingId;
      }

      id = R.id.etNotificationMessage;
      TextInputEditText etNotificationMessage = ViewBindings.findChildViewById(rootView, id);
      if (etNotificationMessage == null) {
        break missingId;
      }

      id = R.id.etNotificationTitle;
      TextInputEditText etNotificationTitle = ViewBindings.findChildViewById(rootView, id);
      if (etNotificationTitle == null) {
        break missingId;
      }

      id = R.id.layoutIndividualStudent;
      LinearLayout layoutIndividualStudent = ViewBindings.findChildViewById(rootView, id);
      if (layoutIndividualStudent == null) {
        break missingId;
      }

      id = R.id.layoutSpecificBatch;
      LinearLayout layoutSpecificBatch = ViewBindings.findChildViewById(rootView, id);
      if (layoutSpecificBatch == null) {
        break missingId;
      }

      id = R.id.progressBar;
      CircularProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivitySendNotificationBinding((CoordinatorLayout) rootView, actvBatch,
          actvRecipientType, actvStudent, btnSendNotification, etNotificationMessage,
          etNotificationTitle, layoutIndividualStudent, layoutSpecificBatch, progressBar, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
