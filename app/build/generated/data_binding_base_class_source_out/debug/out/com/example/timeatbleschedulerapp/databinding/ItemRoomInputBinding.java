// Generated by view binder compiler. Do not edit!
package com.example.timeatbleschedulerapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.timeatbleschedulerapp.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemRoomInputBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton btnDelete;

  @NonNull
  public final MaterialButton btnEdit;

  @NonNull
  public final Chip chipHasComputers;

  @NonNull
  public final Chip chipHasProjector;

  @NonNull
  public final Chip chipHasWhiteboard;

  @NonNull
  public final TextView tvCapacity;

  @NonNull
  public final TextView tvRoomName;

  @NonNull
  public final TextView tvRoomNumber;

  @NonNull
  public final TextView tvRoomType;

  private ItemRoomInputBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton btnDelete, @NonNull MaterialButton btnEdit,
      @NonNull Chip chipHasComputers, @NonNull Chip chipHasProjector,
      @NonNull Chip chipHasWhiteboard, @NonNull TextView tvCapacity, @NonNull TextView tvRoomName,
      @NonNull TextView tvRoomNumber, @NonNull TextView tvRoomType) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnEdit = btnEdit;
    this.chipHasComputers = chipHasComputers;
    this.chipHasProjector = chipHasProjector;
    this.chipHasWhiteboard = chipHasWhiteboard;
    this.tvCapacity = tvCapacity;
    this.tvRoomName = tvRoomName;
    this.tvRoomNumber = tvRoomNumber;
    this.tvRoomType = tvRoomType;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemRoomInputBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemRoomInputBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_room_input, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemRoomInputBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      MaterialButton btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnEdit;
      MaterialButton btnEdit = ViewBindings.findChildViewById(rootView, id);
      if (btnEdit == null) {
        break missingId;
      }

      id = R.id.chipHasComputers;
      Chip chipHasComputers = ViewBindings.findChildViewById(rootView, id);
      if (chipHasComputers == null) {
        break missingId;
      }

      id = R.id.chipHasProjector;
      Chip chipHasProjector = ViewBindings.findChildViewById(rootView, id);
      if (chipHasProjector == null) {
        break missingId;
      }

      id = R.id.chipHasWhiteboard;
      Chip chipHasWhiteboard = ViewBindings.findChildViewById(rootView, id);
      if (chipHasWhiteboard == null) {
        break missingId;
      }

      id = R.id.tvCapacity;
      TextView tvCapacity = ViewBindings.findChildViewById(rootView, id);
      if (tvCapacity == null) {
        break missingId;
      }

      id = R.id.tvRoomName;
      TextView tvRoomName = ViewBindings.findChildViewById(rootView, id);
      if (tvRoomName == null) {
        break missingId;
      }

      id = R.id.tvRoomNumber;
      TextView tvRoomNumber = ViewBindings.findChildViewById(rootView, id);
      if (tvRoomNumber == null) {
        break missingId;
      }

      id = R.id.tvRoomType;
      TextView tvRoomType = ViewBindings.findChildViewById(rootView, id);
      if (tvRoomType == null) {
        break missingId;
      }

      return new ItemRoomInputBinding((MaterialCardView) rootView, btnDelete, btnEdit,
          chipHasComputers, chipHasProjector, chipHasWhiteboard, tvCapacity, tvRoomName,
          tvRoomNumber, tvRoomType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
