// Generated by view binder compiler. Do not edit!
package com.example.timeatbleschedulerapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.timeatbleschedulerapp.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemSubjectInputBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton btnDelete;

  @NonNull
  public final MaterialButton btnEdit;

  @NonNull
  public final Chip chipRequiresLab;

  @NonNull
  public final Chip chipRequiresProjector;

  @NonNull
  public final TextView tvHoursPerWeek;

  @NonNull
  public final TextView tvSubjectCode;

  @NonNull
  public final TextView tvSubjectName;

  @NonNull
  public final TextView tvSubjectType;

  private ItemSubjectInputBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton btnDelete, @NonNull MaterialButton btnEdit,
      @NonNull Chip chipRequiresLab, @NonNull Chip chipRequiresProjector,
      @NonNull TextView tvHoursPerWeek, @NonNull TextView tvSubjectCode,
      @NonNull TextView tvSubjectName, @NonNull TextView tvSubjectType) {
    this.rootView = rootView;
    this.btnDelete = btnDelete;
    this.btnEdit = btnEdit;
    this.chipRequiresLab = chipRequiresLab;
    this.chipRequiresProjector = chipRequiresProjector;
    this.tvHoursPerWeek = tvHoursPerWeek;
    this.tvSubjectCode = tvSubjectCode;
    this.tvSubjectName = tvSubjectName;
    this.tvSubjectType = tvSubjectType;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemSubjectInputBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemSubjectInputBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_subject_input, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemSubjectInputBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDelete;
      MaterialButton btnDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnDelete == null) {
        break missingId;
      }

      id = R.id.btnEdit;
      MaterialButton btnEdit = ViewBindings.findChildViewById(rootView, id);
      if (btnEdit == null) {
        break missingId;
      }

      id = R.id.chipRequiresLab;
      Chip chipRequiresLab = ViewBindings.findChildViewById(rootView, id);
      if (chipRequiresLab == null) {
        break missingId;
      }

      id = R.id.chipRequiresProjector;
      Chip chipRequiresProjector = ViewBindings.findChildViewById(rootView, id);
      if (chipRequiresProjector == null) {
        break missingId;
      }

      id = R.id.tvHoursPerWeek;
      TextView tvHoursPerWeek = ViewBindings.findChildViewById(rootView, id);
      if (tvHoursPerWeek == null) {
        break missingId;
      }

      id = R.id.tvSubjectCode;
      TextView tvSubjectCode = ViewBindings.findChildViewById(rootView, id);
      if (tvSubjectCode == null) {
        break missingId;
      }

      id = R.id.tvSubjectName;
      TextView tvSubjectName = ViewBindings.findChildViewById(rootView, id);
      if (tvSubjectName == null) {
        break missingId;
      }

      id = R.id.tvSubjectType;
      TextView tvSubjectType = ViewBindings.findChildViewById(rootView, id);
      if (tvSubjectType == null) {
        break missingId;
      }

      return new ItemSubjectInputBinding((MaterialCardView) rootView, btnDelete, btnEdit,
          chipRequiresLab, chipRequiresProjector, tvHoursPerWeek, tvSubjectCode, tvSubjectName,
          tvSubjectType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
